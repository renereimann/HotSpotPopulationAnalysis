#!/usr/bin/env python

import sys, cPickle, os, argparse
import numpy as np
from ps_analysis.scripts.parametrization_fit import pVal_calc
from ps_analysis.hpa.utils import expectation, background_pool, signal_pool_FIRESONG, signal_trials 

# get arguments
parser = argparse.ArgumentParser()
parser.add_argument("--infile_firesong", 
                    type=str,
                    required=True,
                    help="Input file with that was generated by firesong")
parser.add_argument("--infile_signal",
                        type=str,
                        required=True,
                        help="Give indir for signal signal.")
parser.add_argument("--infile_background",
                        type=str,
                        required=True,
                        help="Give indir for background.")
parser.add_argument("--expectation",
                        type=str,
                        required=True,
                        help="Give path to expectation spline")
parser.add_argument("--outdir",
                        type=str,
                        required=True,
                        help="Give outpath.")
parser.add_argument("--n_iter", 
                    type=int,  
                    default=1000,
                    help="Number of iteration to perform for these settings.")
parser.add_argument("--seed", 
                    type=int,  
                    default=None,
                    help="Number of iteration to perform for these settings.")
args = parser.parse_args()

for k, v in args._get_kwargs():
    print "%15s"%k, v
 
print(33*"-")
                 
RNG = np.random.RandomState(args.seed)
seed_bgd_pool, seed_sig_pool = RNG.randint(0, np.iinfo(np.uint32).max, size=2)
                 
# read expectation spline
print("Load expectation ...")
expect = expectation(args.expectation)
    
# get background pool
print("Load background pool ...")
bgd_pool = background_pool()
bgd_pool.load( args.infile_background, seed=seed_bgd_pool)

# get signal pool
print("Load signal pool ...")
sig_pool = signal_pool_FIRESONG()
sig_pool.load(args.infile_signal, seed=seed_sig_pool)
sig_pool.load_firesong_representation(args.infile_firesong)  

#### start generating stuff
print("Start generating trials ...")        
out = signal_trials(args.n_iter)
while out.need_more_trials():
    bgd            = bgd_pool.get_pseudo_experiment()
    sig, n_tot_inj = sig_pool.get_pseudo_experiment()

    solid_angle_hemisphere = 2*np.pi*(np.sin(np.pi/2) - np.sin(np.radians(-3)))
    solid_angle_per_source = np.pi*np.radians(bgd_pool.min_ang_dist)**2

    data = bgd
    for i, s in enumerate(sig):
        prob = len(data)*solid_angle_per_source/solid_angle_hemisphere
        if RNG.uniform(0, 1) < prob:
            compare_idx = RNG.randint(len(data))
            if data[compare_idx] < s:
                data[compare_idx] = s
        else:
            data = np.concatenate([data, [s]])
            
    # Threshold cut, no pValues below  min_thres
    data = np.sort(data)
    data = data[data >= bgd_pool.cutoff]

    # local pValue calculation and give back maximum significant pValue
    pseudo_result = expect.poisson_test(data)
    
    out.add_trial(n_tot_inj, pseudo_result)
print("... done.")
out.clean_nans()
            
# save stuff
print("Save results")
firesong_config = ".".join(os.path.basename(args.infile_firesong).split(".")[:-1])
with open(os.path.join(args.outdir,"HPA_firesong_signal_trials_{firesong_config}_seed_{args.seed}.npy".format(**locals())), "w") as open_file:
    np.save(open_file, out.trials)
with open(os.path.join(args.outdir,"HPA_firesong_signal_trials_{firesong_config}_seed_{args.seed}.args".format(**locals())), "w") as open_file:
    cPickle.dump(args, open_file)
